{"version":3,"sources":["actions/fetch.js","API.js","reducers/fetch.js","components/Character/Character.js","components/Characters/Characters.js","components/common/Loading.js","components/Search/Search.js","App.js","hooks/useFetch.js","reportWebVitals.js","index.js"],"names":["ACTIONS","API","axios","create","baseURL","initialState","loading","error","data","fetchReducer","state","action","type","info","payload","results","Character","name","image","species","status","gender","Col","md","sm","Card","className","style","width","Img","variant","src","Body","Title","Subtitle","Text","Characters","characters","Row","length","map","character","index","override","display","margin","borderColor","Loading","color","css","size","Search","findCharacters","useState","search","setSearch","handleSearch","e","preventDefault","Form","onSubmit","FormGroup","Control","placeholder","onChange","target","value","Button","memo","App","endpoint","setEndpoint","useReducer","dispatch","getData","useCallback","a","get","console","useEffect","useFetch","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ee2c0a4.chunk.js","sourcesContent":["export const ACTIONS = {\r\n    SET_DATA : \"SET_DATA\",\r\n    SET_ERROR : \"SET_ERROR\",\r\n    SET_LOADING : \"SET_LOADING\"\r\n}","import axios from \"axios\"\r\n\r\nexport const API = axios.create({\r\n    baseURL : \"https://rickandmortyapi.com/api/\"\r\n})","import { ACTIONS } from \"../actions/fetch\"\r\n\r\nexport const initialState = {\r\n    loading: true,\r\n    error: false,\r\n    data: {}\r\n}\r\n\r\nexport const fetchReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ACTIONS.SET_DATA:\r\n            return {\r\n                ...initialState,\r\n                loading: false,\r\n                data: {\r\n                    info: action.payload.info,\r\n                    results: action.payload.results\r\n                }\r\n            }\r\n\r\n            case ACTIONS.SET_ERROR : \r\n            return {\r\n                ...initialState,\r\n                error : true ,\r\n                loading : false\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}","import { Card , Col } from \"react-bootstrap\"\r\n\r\nconst Character = ({name , image , species , status ,gender }) => {\r\n    return (\r\n        <>\r\n           <Col md={3} sm={12}>    \r\n            <Card className=\"card__style\" style={{ width: '18rem' }}>\r\n                <Card.Img variant=\"top\" src={image} />\r\n                <Card.Body>\r\n                    <Card.Title>{name}</Card.Title>\r\n                    <Card.Subtitle className=\"mb-2 text-muted\">{gender}</Card.Subtitle>\r\n                    <Card.Text>\r\n                        {species}\r\n                    </Card.Text>\r\n                    <Card.Text>\r\n                        {status}\r\n                    </Card.Text>\r\n\r\n                </Card.Body>\r\n            </Card>\r\n            </Col>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Character\r\n","import { Row,  } from \"react-bootstrap\"\r\nimport Character from \"../Character/Character\"\r\n\r\nconst Characters = ({ characters }) => {\r\n   \r\n    return (\r\n        <>\r\n            <Row className=\"justify-content-center\">\r\n                {\r\n                    characters?.length > 0 && characters.map((character , index) => (\r\n                        <Character key={index} {...character} />\r\n                    ))\r\n                }\r\n            </Row>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Characters\r\n","import ClipLoader from \"react-spinners/ClipLoader\";\r\n\r\nconst override = {\r\n\r\n    display: \"block\",\r\n    margin: \"0 auto\",\r\n    borderColor: \"blue\",\r\n}\r\n    ;\r\n\r\n\r\nconst Loading = () => <ClipLoader color=\"black\" css={override} size={150} />\r\n\r\n\r\n\r\nexport default Loading","import { useState, memo } from \"react\"\r\nimport { Form, Button, FormGroup } from \"react-bootstrap\"\r\n\r\nconst Search = ({ findCharacters }) => {\r\n\r\n    const [search, setSearch] = useState(\"\")\r\n\r\n    const handleSearch = (e) => {\r\n        e.preventDefault()\r\n        findCharacters(search)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Form onSubmit={handleSearch}>\r\n                <FormGroup>\r\n                    <Form.Control className=\"mb-4 text-center bg-dark text-light border-0\" type=\"text\" placeholder=\"Search\"\r\n                        onChange={(e) => setSearch(e.target.value)} />\r\n                </FormGroup>\r\n                <div className=\"d-grid gap-2\">\r\n                    <Button onSubmit={handleSearch} size=\"lg\" type=\"submit\" className=\"mb-3\">Search</Button>\r\n                </div>\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Search)\r\n","\nimport './App.css';\nimport { useFetch } from './hooks/useFetch';\nimport { useState } from \"react\"\nimport Characters from './components/Characters/Characters';\nimport Loading from './components/common/Loading';\nimport Search from './components/Search/Search';\n\n\n\nfunction App() {\n\n  const [endpoint, setEndpoint] = useState(\"character\")\n  const {loading, error, data} = useFetch(endpoint)\n  const { results: characters, info } = data;\n\n  const findCharacters = (character) => {\n    setEndpoint(`character?name=${character}`)\n  }\n\n  if (loading) return <Loading />\n  if (error) return <h3>Ocurrio un error...</h3>\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"text-center\">Rick and Morty</h1>\n      <Search findCharacters = {findCharacters} />\n      <Characters characters={characters} />\n    </div>\n  );\n}\n\nexport default App;\n","import { useCallback, useEffect, useReducer } from \"react\";\r\nimport { ACTIONS } from \"../actions/fetch\";\r\n\r\nimport { API } from \"../API\"\r\nimport { fetchReducer, initialState } from \"../reducers/fetch\";\r\n\r\nexport const useFetch = (endpoint = \"\") => {\r\n\r\n\r\n    const [state , dispatch] = useReducer(fetchReducer , initialState)\r\n\r\n    const getData = useCallback(async () => {\r\n        try {\r\n            const { data } = await API.get(`${endpoint}`)\r\n            dispatch({type : ACTIONS.SET_DATA , payload : data})\r\n\r\n        } catch (e) {\r\n            console.error(e);\r\n            dispatch({type : ACTIONS.SET_ERROR})\r\n        }\r\n    }, [endpoint])\r\n\r\n    useEffect(() => {\r\n        getData()\r\n    }, [endpoint, getData])\r\n\r\nreturn state\r\n\r\n}\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}